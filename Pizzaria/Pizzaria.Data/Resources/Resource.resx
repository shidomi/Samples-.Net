<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddOnInventory" xml:space="preserve">
    <value>insert into pizz_Inventory
(
	Categoria,
	NomeFornecedor,
	NumDoc,
	NomeProduto,
	Valor,
	Observacoes,
	DataCriacao
)
values
(
	@Categoria,
	@NomeFornecedor,
	@NumeroDoc,
	@NomeProduto,
	@Valor,
	@Observacao,
	@DataCriacao
)</value>
  </data>
  <data name="EditCustomer" xml:space="preserve">
    <value>update 
	pizz_Customers 
set 
	Telefone = @tel,
	Nome = @nome,
	Endereco = @end,
	Bairro = @barr,
	Numero = @num,
	Complemento = @comp,
	Observacoes = @obs
where
	ID = @id</value>
  </data>
  <data name="GetCustomer" xml:space="preserve">
    <value>select 
	ID,
	Nome, 
	Telefone, 
	Endereco, 
	Bairro, 
	Numero, 
	Complemento, 
	Observacoes 
from 
	pizz_Customers</value>
  </data>
  <data name="GetCustomerByID" xml:space="preserve">
    <value>select 
	ID,
	Nome, 
	Telefone, 
	Endereco, 
	Bairro, 
	Numero, 
	Complemento, 
	Observacoes 
from 
	pizz_Customers
where
	ID = @id</value>
  </data>
  <data name="GetCustomerByName" xml:space="preserve">
    <value>select 
	ID,
	Telefone,
	Nome,
	Endereco,
	Bairro,
	Numero,
	Complemento,
	Observacoes
from 
	pizz_Customers
where
	Nome like '%' + @name + '%'
order by
	Nome</value>
  </data>
  <data name="GetCustomerByNumber" xml:space="preserve">
    <value>select 
	ID,
	Nome, 
	Telefone, 
	Endereco, 
	Bairro, 
	Numero, 
	Complemento, 
	Observacoes 
from 
	pizz_Customers
where
	Telefone = @nmbr</value>
  </data>
  <data name="GetItemByName" xml:space="preserve">
    <value>select distinct
	NomeFornecedor,
	NumDoc,
	NomeProduto,
	Valor,
	(
		select COUNT(*)from pizz_Inventory where NomeProduto like '%'+@nome+'%'
	)as Quantidade,
	Observacoes
from
	pizz_Inventory
where
	Categoria = @categoria and
	NomeProduto like '%'+@nome+'%'</value>
  </data>
  <data name="InsertCustomer" xml:space="preserve">
    <value>insert into pizz_Customers
(
	Nome, 
	Telefone, 
	Endereco, 
	Bairro, 
	Numero, 
	Complemento, 
	Observacoes,
	DataCriacao
)
values
(
	@Nome,
	@Telefone,
	@Endereco,
	@Bairro,
	@Numero,
	@Complemento,
	@Observacoes,
	@DataCriacao
)</value>
  </data>
  <data name="InsertOrder" xml:space="preserve">
    <value>insert into pizz_Orders
(
	ID,
	Cliente,
	Telefone,
	Pedido,
	DataPedido
)
values
(
	@ID,
	@Cliente,
	@Telefone,
	@Pedido,
	@DataPedido
)</value>
  </data>
  <data name="RemoveItem" xml:space="preserve">
    <value>delete TOP(1) from
	pizz_Inventory 
where 
	NomeFornecedor = @NomeFornecedor and
	NumDoc = @NumeroDoc and
	NomeProduto = @NomeProduto</value>
  </data>
  <data name="Report" xml:space="preserve">
    <value>declare @TCC int -- Total de clientes cadastrados
declare @CDM int -- Clientes cadastrados no mes
declare @TP int  -- Total de Pedido
declare @PM int  -- Pedidos no mes

set @TCC = (select COUNT(*) from pizz_Customers)
set @CDM = (select COUNT(*) from pizz_Customers WHERE MONTH(DataCriacao) = MONTH(GETDATE())  and YEAR(DataCriacao) = YEAR(GETDATE()))
set @TP = (select count(distinct ID) from pizz_Orders)
set @PM = (select COUNT(distinct ID) from pizz_Orders WHERE MONTH(DataPedido) = MONTH(GETDATE())  and YEAR(DataPedido) = YEAR(GETDATE()))

CREATE TABLE #pizz_Report
(
	TotalClientesCad int NOT NULL,
	ClienteCadMes int NOT NULL,
	TotalPedidos int NOT NULL,
	PedidosMes int NOT NULL
)
insert into #pizz_Report 
(
	TotalClientesCad,
	ClienteCadMes,
	TotalPedidos,
	PedidosMes
)
values
(
	@TCC,
	@CDM,
	@TP,
	@PM
)
select 
	TotalClientesCad,
	ClienteCadMes,
	TotalPedidos,
	PedidosMes
from 
	#pizz_Report
	
drop table #pizz_Report</value>
  </data>
</root>